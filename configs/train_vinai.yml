experiment_name: "'train_vinai'"

data:
  train:
    module: torch.utils.data
    name: DataLoader
    kwargs:
      dataset:
        module: datasets.fisheyevinai_dataset
        name: FisheyeVinAIDataset
        kwargs:
          dataroot: "'../../datasets/vinai/depth/PA- 3D view at 4 overlap zones When passing throught shade of building or tree_Sunny'"
          mask_dir: "'datasets/masks/vinaicar'"
          calib_file: "'../../datasets/vinai/VFe34_Calib_17Feb2023/cameraData.json'"
          token_list_file: "'../../datasets/vinai/depth/PA- 3D view at 4 overlap zones When passing throught shade of building or tree_Sunny/train.txt'"
          cam_names:
            - "'front'"
            - "'left'"
            - "'rear'"
            - "'right'"
          fovs:
            front: ((-np.pi / 2, np.pi / 2), (-np.pi / 2, np.pi / 2))
            left: ((-np.pi / 2, np.pi / 2), (-np.pi / 2, np.pi / 2))
            rear: ((-np.pi / 2, np.pi / 2), (-np.pi / 2, np.pi / 2))
            right: ((-np.pi / 2, np.pi / 2), (-np.pi / 2, np.pi / 2))
          image_shape: (640, 400)
          jittering: (0.2, 0.2, 0.2, 0.05)
          ref_extrinsic_idx: 0
          length: 0
      shuffle: True
      batch_size: 2
      num_workers: 6
      pin_memory: True

  valid:
    module: torch.utils.data
    name: DataLoader
    kwargs:
      dataset:
        module: datasets.fisheyevinai_dataset
        name: FisheyeVinAIDataset
        kwargs:
          dataroot: "'../../datasets/vinai/depth/PA- 3D view at 4 overlap zones When passing throught shade of building or tree_Sunny'"
          mask_dir: "'datasets/masks/vinaicar'"
          calib_file: "'../../datasets/vinai/VFe34_Calib_17Feb2023/cameraData.json'"
          token_list_file: "'../../datasets/vinai/depth/PA- 3D view at 4 overlap zones When passing throught shade of building or tree_Sunny/val.txt'"
          cam_names:
            - "'front'"
            - "'left'"
            - "'rear'"
            - "'right'"
          fovs:
            front: ((-np.pi / 2, np.pi / 2), (-np.pi / 2, np.pi / 2))
            left: ((-np.pi / 2, np.pi / 2), (-np.pi / 2, np.pi / 2))
            rear: ((-np.pi / 2, np.pi / 2), (-np.pi / 2, np.pi / 2))
            right: ((-np.pi / 2, np.pi / 2), (-np.pi / 2, np.pi / 2))
          image_shape: (640, 400)
          jittering: (0.0, 0.0, 0.0, 0.0)
          ref_extrinsic_idx: 0
          length: 0
      shuffle: False
      batch_size: 2
      num_workers: 6
      pin_memory: True

model:
  module: models.vf_depth
  name: VFDepth
  kwargs:
    input_width: 640
    input_height: 400

optimizer:
  module: torch.optim
  name: Adam
  kwargs:
    params: model.parameters()
    lr: 0.0001

loss_computation_wrapper:
  module: losses.loss_computation_wrapper
  name: LossComputationWrapper
  kwargs:
    model: model
    loss_fn:
      module: losses.multi_cam_loss
      name: MultiCamLoss
      kwargs:
        disparity_smoothness: 0.001
        spatio_coeff: 0.03
        spatio_tempo_coeff: 0.1
    max_depth: 80.0
    min_depth: 0.2
    focal_length_scale: 300.0
    neighbor_cam_indices_map:
      0: [3, 1]
      1: [0, 2]
      2: [1, 3]
      3: [2, 0]

loss_fn:
  module: flame.loss
  name: Loss
  kwargs:
    loss_fn: loss_computation_wrapper
    output_transform: >
      lambda output: (
        output[1][8], # org_prev_images
        output[1][9], # org_cur_images
        output[1][10], # org_next_images
        output[1][3], # masks
        output[0][2], # depth_maps
        output[1][4], # intrinsics
        output[1][5], # extrinsics
        output[0][0], # cur_to_prev_poses
        output[0][1], # cur_to_next_poses
        output[1][6], # distortions
        output[1][11], # fovs
      )

engine:
  module: flame.engine
  name: Trainer.factory
  kwargs:
    model: model
    data: data.train
    optimizer: optimizer
    loss_fn: loss_fn
    device: "'cuda'"
    max_epochs: 200
    prepare_batch: prepare_batch
    model_fn: >
      lambda model, x: model(
        x[0], # prev_image
        x[1], # cur_image
        x[2], # next_image
        x[3], # mask
        x[4], # intrinsic
        x[5], # extrinsic
        x[7], # ref_extrinsic
        x[6], # distortion
        x[11], # fov
      )

evaluators:
  valid:
    module: flame.engine
    name: Evaluator.factory
    kwargs:
      model: model
      data: data.valid
      device: "'cuda'"
      prepare_batch: prepare_batch
      model_fn: >
        lambda model, x: model(
          x[0], # prev_image
          x[1], # cur_image
          x[2], # next_image
          x[3], # mask
          x[4], # intrinsic
          x[5], # extrinsic
          x[7], # ref_extrinsic
          x[6], # distortion
          x[11], # fov
        )
    event: Events.EPOCH_COMPLETED
    function: run

metrics:
  module: flame.handlers
  name: Metrics
  kwargs:
    evaluators:
      - evaluators.valid
    metrics:
      loss:
        module: metrics.loss
        name: Loss
        kwargs:
          loss_fn: loss_fn

# lr_scheduler:
#   module: ignite.handlers.param_scheduler
#   name: ReduceLROnPlateauScheduler
#   kwargs:
#     optimizer: optimizer
#     metric_name: "'total_loss'"
#     mode: "'min'"
#     factor: 0.1
#     patience: 10
#   engine: evaluators.valid
#   event: Events.EPOCH_COMPLETED

# visualization:
#   module: handlers.visualizer
#   name: Visualizer
#   kwargs:
#     trainer: engine
#     evaluator: evaluators.valid
#     out_dir: "f'output/{experiment_name}/vis'"
#     out_name: "'visualization'"
#     out_resolution: (1286, 1606)  # vinai
#     fps: 2
#     file_ext: "'mp4'"
#     fourcc: "'mp4v'"
#     grid_nrow: 2
#     output_transform: 'lambda x: (x[0][2], x[1][9])'
#     event_name: Events.EPOCH_COMPLETED

logging:
  progress_bar:
    module: flame.handlers
    name: ProgressBar
    kwargs:
      trainer: engine
      evaluators:
        valid: evaluators.valid
      metric_names:
        - "'total_loss'"

  tensorboard:
    module: flame.handlers
    name: Tensorboard
    kwargs:
      log_dir: "f'runs/{experiment_name}'"
      logger_handlers:
        - engine: engine
          event_name: Events.EPOCH_COMPLETED
          log_handler:
            module: ignite.contrib.handlers.tensorboard_logger
            name: OptimizerParamsHandler
            kwargs:
              optimizer: optimizer
        - engine: engine
          event_name: Events.ITERATION_COMPLETED(every=100)
          log_handler:
            module: ignite.contrib.handlers.tensorboard_logger
            name: OutputHandler
            kwargs:
              tag: "'training'"
              output_transform: "lambda loss: {'loss': loss}"
        - engine: evaluators.valid
          event_name: Events.EPOCH_COMPLETED
          log_handler:
            module: ignite.contrib.handlers.tensorboard_logger
            name: OutputHandler
            kwargs:
              tag: "'evaluation/valid'"
              metric_names:
                - "'total_loss'"
                - "'reproj_loss'"
                - "'spatio_loss'"
                - "'spatio_tempo_loss'"
                - "'smooth_loss'"
              global_step_transform: global_step_from_engine(engine, Events.EPOCH_COMPLETED)
        - engine: engine
          event_name: Events.EPOCH_COMPLETED
          log_handler:
            module: ignite.contrib.handlers.tensorboard_logger
            name: GradsHistHandler
            kwargs:
              tag: "'grads'"
              model: model

# early_stopping:
#   module: flame.handlers
#   name: EarlyStopping
#   kwargs:
#     patience: 5
#     score_name: "'accuracy'"
#     mode: "'max'"
#     trainer: engine
#     evaluator: evaluators.valid
#   event: Events.EPOCH_COMPLETED

checkpoint:
  best:
    module: flame.handlers
    name: BestCheckpoint
    kwargs:
      engine: evaluators.valid
      event: Events.EPOCH_COMPLETED
      modules:
        - "'model'"
      dirname: "f'checkpoints/{experiment_name}'"
      score_name: "'total_loss'"
      mode: "'min'"
      n_saved: 10
      global_step_transform: global_step_from_engine(engine, Events.EPOCH_COMPLETED)

  backup:
    module: flame.handlers
    name: BackupCheckpoint
    kwargs:
      engine: engine
      event: Events.EPOCH_COMPLETED
      modules:
        - "'model'"
        - "'engine'"
        - "'optimizer'"
        # - "'early_stopping'"
        # - "'lr_scheduler'"
        - "'checkpoint.best'"
      dirname: "f'checkpoints/{experiment_name}'"
      n_saved: 5
      global_step_transform: global_step_from_engine(engine, Events.EPOCH_COMPLETED)

  loader:
    module: flame.handlers
    name: CheckpointLoader
    kwargs:
      path: null

  config_backup:
    module: flame.handlers
    name: ConfigBackup
    kwargs:
      backup_checkpoint: checkpoint.backup

extralibs:
  prepare_batch:
    module: datasets.utils
    name: prepare_batch
  Events:
    module: ignite.engine
    name: Events
  global_step_from_engine:
    module: ignite.handlers
    name: global_step_from_engine
  np: numpy
